{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","props","react_default","a","createElement","className","onClick","upvote","style","borderColor","votes","downvote","text","JokeList","_useState","useState","JSON","parse","window","localStorage","getItem","_useState2","Object","slicedToArray","state","setState","_useState3","_useState4","load","setLoad","seenJokes","Set","map","j","getJokes","_getJokes","apply","this","arguments","asyncToGenerator","regenerator_default","mark","_callee","_jokes","res","newJoke","wrap","_context","prev","next","jokes","length","axios","get","headers","Accept","sent","data","joke","has","console","log","push","id","uuid","concat","toConsumableArray","t0","alert","stop","handleVote","delta","objectSpread","useEffect","setItem","stringify","sort","b","src","src_Joke","key","App","src_JokeList","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97eda24e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Joke.css\";\n\nfunction Joke(props){\n  function getColor() {\n    if (props.votes >= 15) {\n      return \"#4CAF50\";\n    } else if (props.votes >= 12) {\n      return \"#8BC34A\";\n    } else if (props.votes >= 9) {\n      return \"#CDDC39\";\n    } else if (props.votes >= 6) {\n      return \"#FFEB3B\";\n    } else if (props.votes >= 3) {\n      return \"#FFC107\";\n    } else if (props.votes >= 0) {\n      return \"#FF9800\";\n    } else {\n      return \"#f44336\";\n    }\n  }\n  function getEmoji() {\n    if (props.votes >= 15) {\n      return \"em em-rolling_on_the_floor_laughing\";\n    } else if (props.votes >= 12) {\n      return \"em em-laughing\";\n    } else if (props.votes >= 9) {\n      return \"em em-smiley\";\n    } else if (props.votes >= 6) {\n      return \"em em-slightly_smiling_face\";\n    } else if (props.votes >= 3) {\n      return \"em em-neutral_face\";\n    } else if (props.votes >= 0) {\n      return \"em em-confused\";\n    } else {\n      return \"em em-angry\";\n    }\n  }\n  \n    return (\n      <div className='Joke'>\n        <div className='Joke-buttons'>\n          <i className='fas fa-arrow-up' onClick={props.upvote} />\n          <span className='Joke-votes' style={{ borderColor: getColor() }}>\n            {props.votes}\n          </span>\n          <i className='fas fa-arrow-down' onClick={props.downvote} />\n        </div>\n        <div className='Joke-text'>{props.text}</div>\n        <div className='Joke-smiley'>\n          <i className={getEmoji()} />\n        </div>\n      </div>\n    );\n  \n}\nexport default Joke;\n","import React, { useState, useEffect } from \"react\";\nimport Joke from \"./Joke\";\nimport axios from \"axios\";\nimport uuid from \"uuid/v4\";\nimport \"./JokeList.css\";\n\nfunction JokeList (props) {\n  \n  const [state, setState] = useState(JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"));\n\n  const [load, setLoad] = useState(false);\n\n  let seenJokes = new Set(state.map(j => j.text));\n\n useEffect(()=>{\n   if (state.length === 0) getJokes();\n},[])\n\n async function getJokes() {\n   try {\n     let jokes = [];\n     while (jokes.length < 10) {\n       let res = await axios.get(\"https://icanhazdadjoke.com/\", {\n         headers: { Accept: \"application/json\" }\n       });\n       let newJoke = res.data.joke;\n       if (!seenJokes.has(newJoke)) {\n         jokes.push({ id: uuid(), text: newJoke, votes: 0 });\n       } else {\n         console.log(\"FOUND A DUPLICATE!\");\n         console.log(newJoke);\n       }\n     }\n     setLoad(false);\n     setState([...state,...jokes]);\n   } catch (e) {\n     alert(e);\n     setLoad(false);\n   }\n }\n\n function handleVote(id, delta) {\n   setState(state.map(j =>\n     j.id === id ? { ...j, votes: j.votes + delta } : j\n     )\n     );\n }\n\n useEffect(()=>{\n  window.localStorage.setItem(\"jokes\", JSON.stringify(state));\n},[state])\n\nfunction handleClick() {\n setLoad(true);\n   getJokes()\n }\n \n   if (load) {\n     return (\n       <div className='JokeList-spinner'>\n         <i className='far fa-8x fa-laugh fa-spin' />\n         <h1 className='JokeList-title'>Loading...</h1>\n       </div>\n     );\n   }\n   let jokes = state.sort((a, b) => b.votes - a.votes);\n   return (\n     <div className='JokeList'>\n       <div className='JokeList-sidebar'>\n         <h1 className='JokeList-title'>\n           <span>Dad</span> Jokes\n         </h1>\n         <img src='https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg' />\n         <button className='JokeList-getmore' onClick={handleClick}>\n           Fetch Jokes\n         </button>\n       </div>\n\n       <div className='JokeList-jokes'>\n         {jokes.map(j => (\n           <Joke\n             key={j.id}\n             votes={j.votes}\n             text={j.text}\n             upvote={() => handleVote(j.id, 1)}\n             downvote={() => handleVote(j.id, -1)}\n           />\n         ))}\n       </div>\n     </div>\n   );\n \n  }\n  \n  export default JokeList;\n\n    \n","import React from \"react\";\nimport JokeList from \"./JokeList\";\nimport \"./App.css\";\n\nfunction App (){\n  \n    return (\n      <div className='App'>\n        <JokeList />\n      </div>\n    );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}